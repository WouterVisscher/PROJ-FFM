// Generated by jextract

package nl.kadaster.proj;

import java.lang.invoke.*;
import java.lang.foreign.*;
import java.nio.ByteOrder;
import java.util.*;
import java.util.function.*;
import java.util.stream.*;

import static java.lang.foreign.ValueLayout.*;
import static java.lang.foreign.MemoryLayout.PathElement.*;

/**
 * {@snippet lang=c :
 * struct {
 *     char *name;
 *     char *abbreviation;
 *     char *direction;
 *     char *unit_name;
 *     double unit_conv_factor;
 *     PJ_UNIT_TYPE unit_type;
 * }
 * }
 */
public class PJ_AXIS_DESCRIPTION {

    PJ_AXIS_DESCRIPTION() {
        // Should not be called directly
    }

    private static final GroupLayout $LAYOUT = MemoryLayout.structLayout(
        proj_h.C_POINTER.withName("name"),
        proj_h.C_POINTER.withName("abbreviation"),
        proj_h.C_POINTER.withName("direction"),
        proj_h.C_POINTER.withName("unit_name"),
        proj_h.C_DOUBLE.withName("unit_conv_factor"),
        proj_h.C_INT.withName("unit_type"),
        MemoryLayout.paddingLayout(4)
    ).withName("$anon$1555:9");

    /**
     * The layout of this struct
     */
    public static final GroupLayout layout() {
        return $LAYOUT;
    }

    private static final AddressLayout name$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("name"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * char *name
     * }
     */
    public static final AddressLayout name$layout() {
        return name$LAYOUT;
    }

    private static final long name$OFFSET = 0;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * char *name
     * }
     */
    public static final long name$offset() {
        return name$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * char *name
     * }
     */
    public static MemorySegment name(MemorySegment struct) {
        return struct.get(name$LAYOUT, name$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * char *name
     * }
     */
    public static void name(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(name$LAYOUT, name$OFFSET, fieldValue);
    }

    private static final AddressLayout abbreviation$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("abbreviation"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * char *abbreviation
     * }
     */
    public static final AddressLayout abbreviation$layout() {
        return abbreviation$LAYOUT;
    }

    private static final long abbreviation$OFFSET = 8;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * char *abbreviation
     * }
     */
    public static final long abbreviation$offset() {
        return abbreviation$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * char *abbreviation
     * }
     */
    public static MemorySegment abbreviation(MemorySegment struct) {
        return struct.get(abbreviation$LAYOUT, abbreviation$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * char *abbreviation
     * }
     */
    public static void abbreviation(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(abbreviation$LAYOUT, abbreviation$OFFSET, fieldValue);
    }

    private static final AddressLayout direction$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("direction"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * char *direction
     * }
     */
    public static final AddressLayout direction$layout() {
        return direction$LAYOUT;
    }

    private static final long direction$OFFSET = 16;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * char *direction
     * }
     */
    public static final long direction$offset() {
        return direction$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * char *direction
     * }
     */
    public static MemorySegment direction(MemorySegment struct) {
        return struct.get(direction$LAYOUT, direction$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * char *direction
     * }
     */
    public static void direction(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(direction$LAYOUT, direction$OFFSET, fieldValue);
    }

    private static final AddressLayout unit_name$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("unit_name"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * char *unit_name
     * }
     */
    public static final AddressLayout unit_name$layout() {
        return unit_name$LAYOUT;
    }

    private static final long unit_name$OFFSET = 24;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * char *unit_name
     * }
     */
    public static final long unit_name$offset() {
        return unit_name$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * char *unit_name
     * }
     */
    public static MemorySegment unit_name(MemorySegment struct) {
        return struct.get(unit_name$LAYOUT, unit_name$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * char *unit_name
     * }
     */
    public static void unit_name(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(unit_name$LAYOUT, unit_name$OFFSET, fieldValue);
    }

    private static final OfDouble unit_conv_factor$LAYOUT = (OfDouble)$LAYOUT.select(groupElement("unit_conv_factor"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * double unit_conv_factor
     * }
     */
    public static final OfDouble unit_conv_factor$layout() {
        return unit_conv_factor$LAYOUT;
    }

    private static final long unit_conv_factor$OFFSET = 32;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * double unit_conv_factor
     * }
     */
    public static final long unit_conv_factor$offset() {
        return unit_conv_factor$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * double unit_conv_factor
     * }
     */
    public static double unit_conv_factor(MemorySegment struct) {
        return struct.get(unit_conv_factor$LAYOUT, unit_conv_factor$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * double unit_conv_factor
     * }
     */
    public static void unit_conv_factor(MemorySegment struct, double fieldValue) {
        struct.set(unit_conv_factor$LAYOUT, unit_conv_factor$OFFSET, fieldValue);
    }

    private static final OfInt unit_type$LAYOUT = (OfInt)$LAYOUT.select(groupElement("unit_type"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * PJ_UNIT_TYPE unit_type
     * }
     */
    public static final OfInt unit_type$layout() {
        return unit_type$LAYOUT;
    }

    private static final long unit_type$OFFSET = 40;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * PJ_UNIT_TYPE unit_type
     * }
     */
    public static final long unit_type$offset() {
        return unit_type$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * PJ_UNIT_TYPE unit_type
     * }
     */
    public static int unit_type(MemorySegment struct) {
        return struct.get(unit_type$LAYOUT, unit_type$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * PJ_UNIT_TYPE unit_type
     * }
     */
    public static void unit_type(MemorySegment struct, int fieldValue) {
        struct.set(unit_type$LAYOUT, unit_type$OFFSET, fieldValue);
    }

    /**
     * Obtains a slice of {@code arrayParam} which selects the array element at {@code index}.
     * The returned segment has address {@code arrayParam.address() + index * layout().byteSize()}
     */
    public static MemorySegment asSlice(MemorySegment array, long index) {
        return array.asSlice(layout().byteSize() * index);
    }

    /**
     * The size (in bytes) of this struct
     */
    public static long sizeof() { return layout().byteSize(); }

    /**
     * Allocate a segment of size {@code layout().byteSize()} using {@code allocator}
     */
    public static MemorySegment allocate(SegmentAllocator allocator) {
        return allocator.allocate(layout());
    }

    /**
     * Allocate an array of size {@code elementCount} using {@code allocator}.
     * The returned segment has size {@code elementCount * layout().byteSize()}.
     */
    public static MemorySegment allocateArray(long elementCount, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(elementCount, layout()));
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
     * The returned segment has size {@code layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, Arena arena, Consumer<MemorySegment> cleanup) {
        return reinterpret(addr, 1, arena, cleanup);
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
     * The returned segment has size {@code elementCount * layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, long elementCount, Arena arena, Consumer<MemorySegment> cleanup) {
        return addr.reinterpret(layout().byteSize() * elementCount, arena, cleanup);
    }
}

