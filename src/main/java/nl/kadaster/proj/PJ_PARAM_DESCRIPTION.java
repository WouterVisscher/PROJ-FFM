// Generated by jextract

package nl.kadaster.proj;

import java.lang.invoke.*;
import java.lang.foreign.*;
import java.nio.ByteOrder;
import java.util.*;
import java.util.function.*;
import java.util.stream.*;

import static java.lang.foreign.ValueLayout.*;
import static java.lang.foreign.MemoryLayout.PathElement.*;

/**
 * {@snippet lang=c :
 * struct {
 *     const char *name;
 *     const char *auth_name;
 *     const char *code;
 *     double value;
 *     const char *unit_name;
 *     double unit_conv_factor;
 *     PJ_UNIT_TYPE unit_type;
 * }
 * }
 */
public class PJ_PARAM_DESCRIPTION {

    PJ_PARAM_DESCRIPTION() {
        // Should not be called directly
    }

    private static final GroupLayout $LAYOUT = MemoryLayout.structLayout(
        proj_h.C_POINTER.withName("name"),
        proj_h.C_POINTER.withName("auth_name"),
        proj_h.C_POINTER.withName("code"),
        proj_h.C_DOUBLE.withName("value"),
        proj_h.C_POINTER.withName("unit_name"),
        proj_h.C_DOUBLE.withName("unit_conv_factor"),
        proj_h.C_INT.withName("unit_type"),
        MemoryLayout.paddingLayout(4)
    ).withName("$anon$1607:9");

    /**
     * The layout of this struct
     */
    public static final GroupLayout layout() {
        return $LAYOUT;
    }

    private static final AddressLayout name$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("name"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * const char *name
     * }
     */
    public static final AddressLayout name$layout() {
        return name$LAYOUT;
    }

    private static final long name$OFFSET = 0;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * const char *name
     * }
     */
    public static final long name$offset() {
        return name$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * const char *name
     * }
     */
    public static MemorySegment name(MemorySegment struct) {
        return struct.get(name$LAYOUT, name$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * const char *name
     * }
     */
    public static void name(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(name$LAYOUT, name$OFFSET, fieldValue);
    }

    private static final AddressLayout auth_name$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("auth_name"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * const char *auth_name
     * }
     */
    public static final AddressLayout auth_name$layout() {
        return auth_name$LAYOUT;
    }

    private static final long auth_name$OFFSET = 8;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * const char *auth_name
     * }
     */
    public static final long auth_name$offset() {
        return auth_name$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * const char *auth_name
     * }
     */
    public static MemorySegment auth_name(MemorySegment struct) {
        return struct.get(auth_name$LAYOUT, auth_name$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * const char *auth_name
     * }
     */
    public static void auth_name(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(auth_name$LAYOUT, auth_name$OFFSET, fieldValue);
    }

    private static final AddressLayout code$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("code"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * const char *code
     * }
     */
    public static final AddressLayout code$layout() {
        return code$LAYOUT;
    }

    private static final long code$OFFSET = 16;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * const char *code
     * }
     */
    public static final long code$offset() {
        return code$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * const char *code
     * }
     */
    public static MemorySegment code(MemorySegment struct) {
        return struct.get(code$LAYOUT, code$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * const char *code
     * }
     */
    public static void code(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(code$LAYOUT, code$OFFSET, fieldValue);
    }

    private static final OfDouble value$LAYOUT = (OfDouble)$LAYOUT.select(groupElement("value"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * double value
     * }
     */
    public static final OfDouble value$layout() {
        return value$LAYOUT;
    }

    private static final long value$OFFSET = 24;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * double value
     * }
     */
    public static final long value$offset() {
        return value$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * double value
     * }
     */
    public static double value(MemorySegment struct) {
        return struct.get(value$LAYOUT, value$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * double value
     * }
     */
    public static void value(MemorySegment struct, double fieldValue) {
        struct.set(value$LAYOUT, value$OFFSET, fieldValue);
    }

    private static final AddressLayout unit_name$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("unit_name"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * const char *unit_name
     * }
     */
    public static final AddressLayout unit_name$layout() {
        return unit_name$LAYOUT;
    }

    private static final long unit_name$OFFSET = 32;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * const char *unit_name
     * }
     */
    public static final long unit_name$offset() {
        return unit_name$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * const char *unit_name
     * }
     */
    public static MemorySegment unit_name(MemorySegment struct) {
        return struct.get(unit_name$LAYOUT, unit_name$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * const char *unit_name
     * }
     */
    public static void unit_name(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(unit_name$LAYOUT, unit_name$OFFSET, fieldValue);
    }

    private static final OfDouble unit_conv_factor$LAYOUT = (OfDouble)$LAYOUT.select(groupElement("unit_conv_factor"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * double unit_conv_factor
     * }
     */
    public static final OfDouble unit_conv_factor$layout() {
        return unit_conv_factor$LAYOUT;
    }

    private static final long unit_conv_factor$OFFSET = 40;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * double unit_conv_factor
     * }
     */
    public static final long unit_conv_factor$offset() {
        return unit_conv_factor$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * double unit_conv_factor
     * }
     */
    public static double unit_conv_factor(MemorySegment struct) {
        return struct.get(unit_conv_factor$LAYOUT, unit_conv_factor$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * double unit_conv_factor
     * }
     */
    public static void unit_conv_factor(MemorySegment struct, double fieldValue) {
        struct.set(unit_conv_factor$LAYOUT, unit_conv_factor$OFFSET, fieldValue);
    }

    private static final OfInt unit_type$LAYOUT = (OfInt)$LAYOUT.select(groupElement("unit_type"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * PJ_UNIT_TYPE unit_type
     * }
     */
    public static final OfInt unit_type$layout() {
        return unit_type$LAYOUT;
    }

    private static final long unit_type$OFFSET = 48;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * PJ_UNIT_TYPE unit_type
     * }
     */
    public static final long unit_type$offset() {
        return unit_type$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * PJ_UNIT_TYPE unit_type
     * }
     */
    public static int unit_type(MemorySegment struct) {
        return struct.get(unit_type$LAYOUT, unit_type$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * PJ_UNIT_TYPE unit_type
     * }
     */
    public static void unit_type(MemorySegment struct, int fieldValue) {
        struct.set(unit_type$LAYOUT, unit_type$OFFSET, fieldValue);
    }

    /**
     * Obtains a slice of {@code arrayParam} which selects the array element at {@code index}.
     * The returned segment has address {@code arrayParam.address() + index * layout().byteSize()}
     */
    public static MemorySegment asSlice(MemorySegment array, long index) {
        return array.asSlice(layout().byteSize() * index);
    }

    /**
     * The size (in bytes) of this struct
     */
    public static long sizeof() { return layout().byteSize(); }

    /**
     * Allocate a segment of size {@code layout().byteSize()} using {@code allocator}
     */
    public static MemorySegment allocate(SegmentAllocator allocator) {
        return allocator.allocate(layout());
    }

    /**
     * Allocate an array of size {@code elementCount} using {@code allocator}.
     * The returned segment has size {@code elementCount * layout().byteSize()}.
     */
    public static MemorySegment allocateArray(long elementCount, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(elementCount, layout()));
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
     * The returned segment has size {@code layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, Arena arena, Consumer<MemorySegment> cleanup) {
        return reinterpret(addr, 1, arena, cleanup);
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
     * The returned segment has size {@code elementCount * layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, long elementCount, Arena arena, Consumer<MemorySegment> cleanup) {
        return addr.reinterpret(layout().byteSize() * elementCount, arena, cleanup);
    }
}

